@startuml

title GUI Classes

class Point {
    A simple class with properties\nfor a 2D coordinate.
    +uint16_t x;
    +uint16_t y;
--
    +Point(int aX, int aY);
    +Point(const Point &arPoint);
}

class Rect {
    A class with two Point properties.
    #Point mTopLeft;
    #Point mBottomRight;
--
    +Rect(int aTop, int aLeft, int aWidth, int aHeight);
    +Rect(const Point &arTopLeft, int aWidth, int aHeight);
    +Rect(const Point &arTopLeft, const Point &arBottomRigth);
    +Rect(const Rect &arRect);
    +Point& TopLeft();
    +Point& BottomRight();
    +int GetWidth();
    +void SetWidth(int aValue);
    +int GetHeight();
    +void SetHeight(int aValue);
    +bool IsHit(const Point &arPoint);
}

class Color {
    Class with uint32_t property for RGB
    and Alpha channel color information.
    The alpha channel is used for opacity.
    Not all platforms support alpha blending.
    #uint32_t mColor;
--
    +Color(uint8_t aRed, uint8_t aGreen, uint8_t aBlue, uint8_t aAlpha);
    +Color(uint32_t aARGB);
    +Color(const Color &arColor);
    +uint8_t GetRed();
    +void SetRed(uint8_t aValue);
    +uint8_t GetGreen();
    +void SetGreen(uint8_t aValue);
    +uint8_t GetBlue();
    +void SetBlue(uint8_t aValue);
    +uint8_t GetAlpha();
    +void SetAlpha(uint8_t aValue);
    +operator uint32_t();
    +operator =(const Color &arColor);
}

class Font {
    When used on Linux, the GUI library can use the FreeType2 library to render fonts.
    #string mFontName;
    #FontStyle mStyle;
    #int mWeight;
--
    +Font(const string &arName);
}

class Pen {
    Class to control pen color and width.
}

@enduml



Bitmap

Class to handle raster images.
Can load bmp and png files through filesystem and do some basic manipulation like resize/stretch.
Canvas

All drawing operations are performed on a Canvas. Descendants can implement in memory canvas, Linux Framebuffer canvas or even a DirectX Canvas.

Support functions:

void DrawDot(const Point &arPoint, const Pen &arPen);
void DrawArc(const Point &arCenter, int aRadius1, int aRadius2, int aStartAngel, int aSweepAngle, const Pen &arPen);
void DrawCircle(const Point &arCenter, int aRadius, const Pen &arPen);
void DrawLine(const Point &arA, const Point &arB, const Pen &arPen);
void DrawRectangle(const Rect &arRect, const Pen &arPen);
void DrawImage(const Point &arTopLeft, const Bitmap &arBitmap);
void DrawText(const Rect &arRect, const Font &arFont, const char *apText, bool aScaleToFit);
Ctrl

The base GUI control class with virtual interface functions for event propagation. All other controls decent from the Ctrl class.
Ctrl objects contains a boolean "invalidated" property, this is flagged in case the object needs rendering. Setter functions and event propagation can invalidate a Ctrl object.

Other properties (With setter/getter functions):

    Color mBackground
    bool mTransparent
    Rect mArea
    Rect mMouseArea
    Anchor mAnchor (Bitmask with Left, Top, Right, Bottom)

Abstracts and helpers:

    bool ProcessEvent(Event &aEvent) // Return true to stop propagation
    void Invalidate()
    bool IsInvalid() const
    bool IsHit(const Point aPoint) const
    void Render(Canvas &aCanvas)

Page

Each view class must decent from Page. Implements interface functions (Ctrl) to start the touch and paint event propagation.
Panel

A control to group other controls.
Image

A control to draw bitmap images.
Label

A control used to draw text and graphics.
Button

Decents from Label. Draws a button in different states.
Posts an event when pressed.
Posts an event when dragged.
Posts an event when released.
CheckBox

A control used to draw a checkbox in different states.
Posts an event when clicked.